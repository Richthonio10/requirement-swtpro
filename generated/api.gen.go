// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// GetProfileResponse defines model for GetProfileResponse.
type GetProfileResponse struct {
	Data   *GetProfileResponseData `json:"data,omitempty"`
	Header ResponseHeader          `json:"header"`
}

// GetProfileResponseData defines model for GetProfileResponseData.
type GetProfileResponseData struct {
	FullName    string `json:"full_name"`
	PhoneNumber string `json:"phone_number"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Password    string `json:"password"`
	PhoneNumber string `json:"phone_number"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	Data   *LoginResponseData `json:"data,omitempty"`
	Header ResponseHeader     `json:"header"`
}

// LoginResponseData defines model for LoginResponseData.
type LoginResponseData struct {
	Id  int64  `json:"id"`
	Jwt string `json:"jwt"`
}

// RegistrationRequest defines model for RegistrationRequest.
type RegistrationRequest struct {
	FullName    string `json:"full_name"`
	Password    string `json:"password"`
	PhoneNumber string `json:"phone_number"`
}

// RegistrationResponse defines model for RegistrationResponse.
type RegistrationResponse struct {
	Data   *RegistrationResponseData `json:"data,omitempty"`
	Header ResponseHeader            `json:"header"`
}

// RegistrationResponseData defines model for RegistrationResponseData.
type RegistrationResponseData struct {
	Id int64 `json:"id"`
}

// ResponseHeader defines model for ResponseHeader.
type ResponseHeader struct {
	Messages   *[]string `json:"messages,omitempty"`
	StatusCode *int      `json:"status_code,omitempty"`
	Successful *bool     `json:"successful,omitempty"`
}

// UpdateProfileRequest defines model for UpdateProfileRequest.
type UpdateProfileRequest struct {
	FullName    *string `json:"full_name,omitempty"`
	PhoneNumber *string `json:"phone_number,omitempty"`
}

// UpdateProfileResponse defines model for UpdateProfileResponse.
type UpdateProfileResponse struct {
	Header ResponseHeader `json:"header"`
}

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = LoginRequest

// UpdateProfileJSONRequestBody defines body for UpdateProfile for application/json ContentType.
type UpdateProfileJSONRequestBody = UpdateProfileRequest

// RegisterJSONRequestBody defines body for Register for application/json ContentType.
type RegisterJSONRequestBody = RegistrationRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Login
	// (POST /login)
	Login(ctx echo.Context) error
	// GetProfile
	// (GET /profile)
	GetProfile(ctx echo.Context) error
	// UpdateProfile
	// (PATCH /profile)
	UpdateProfile(ctx echo.Context) error
	// Register
	// (POST /register)
	Register(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Login(ctx)
	return err
}

// GetProfile converts echo context to params.
func (w *ServerInterfaceWrapper) GetProfile(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProfile(ctx)
	return err
}

// UpdateProfile converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateProfile(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateProfile(ctx)
	return err
}

// Register converts echo context to params.
func (w *ServerInterfaceWrapper) Register(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Register(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/login", wrapper.Login)
	router.GET(baseURL+"/profile", wrapper.GetProfile)
	router.PATCH(baseURL+"/profile", wrapper.UpdateProfile)
	router.POST(baseURL+"/register", wrapper.Register)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xWTW/bMAz9KwO3Y1BnH9jBtxUDtgIbMGTrqQgKVWZsFbakUlSLoPB/HyQ7H46VZmub",
	"nFqr1OPj4yPVR5CmsUajZgf5IzhZYSPir9+Qf5FZqBpn6KzRDsOpJWORWGGMKQSL8PMd4QJyeJtt0LIe",
	"KhvjfA232glUKAqkQ/dXt7530W07AcI7rwgLyK9WIPMJ8NIi5GBublFywN+TeVTFwtf1tRZNLLBHcUxK",
	"lwHFVkbjtfbNTcd1J2CHzgZr52aK4A9TKj3DO4+Ox7SscO7BUPEKrAbRkw3yE6Re0vIBxKm6PU464q6i",
	"lgtDjWDIQWn+/AnWUEozliHnBG4f+LCoqoAuMsVmhqVyTIKV2d/hA8Y7Wv8HJn3KC8MqXmKJFNKpnLE3",
	"93MNMjZCOu2A8ChZg86Jsk/M2Lhko/sDQSSW4duxYO+upSm2XbPlXeelROcWvt76+40xNQodqY+IXtpC",
	"MK5X5fPMetCPh9Luc9dx3REClV6YgF8riT2Frk74efEn9kBxHT4vHdKb30j3SobRuUdyymjI4f3Z9Gwa",
	"Io1FLayCHD7GozBfXMU6sjosqFif6fQNVUZTXhSQd/sLOtro+NwUyxAkjWbUMV5YWysZb2S3zujNg/2P",
	"C7nrbDsUh8ljPOgEjFw/TKevnbtvb9vG9M43jaDluuxwltnOCgGwxIRCm/ccjsg38X/PijRKT4qXkF89",
	"wjkKQvriuYL8at7Ot2vaIhr3OMtqXM3A/kfqe3KyT9z/9Jj/r6RDtaJdKK71frMmR2q2ijiOuqk3/sTi",
	"Jh/o0Yytdeg1p7C5ouSeasihYrZ5ltVGiroKSrbz9m8AAAD//0C5ePEaDAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
